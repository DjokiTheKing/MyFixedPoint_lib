#ifndef MY_FIXED_POINT_IMPL_H
#define MY_FIXED_POINT_IMPL_H

#include "MyFixedPoint.h"

fixed::fixed(float val)
{
#ifdef PICO_RP2040
    value = float2fix(val, FRAC_BITS);
#else
    value = int32_t(val * (1 <<FRAC_BITS));
#endif
}


inline fixed fixed::operator+(const fixed &other) const
{
    fixed res;
    res.value = value+other.value;
    return res;
}

inline fixed fixed::operator-(const fixed &other) const
{
    fixed res;
    res.value = value-other.value;
    return res;
}

inline fixed fixed::operator*(const fixed &other) const
{
    fixed res;
    res.value = int32_t((int64_t(value)*int64_t(other.value)) >> FRAC_BITS);
    return res;
}

inline fixed fixed::operator/(const fixed &other) const
{
    fixed res;
    res.value = int32_t((int64_t(value)<<FRAC_BITS)/int64_t(other.value));
    return res;
}

inline fixed fixed::operator+(const float &other) const
{
#ifdef PICO_RP2040
    fixed res;
    res.value = value+float2fix(other, FRAC_BITS);
    return res;
#else
    fixed res;
    res.value = value+int32_t(other * (1 <<FRAC_BITS));
    return res;
#endif
}

inline fixed fixed::operator-(const float &other) const
{
#ifdef PICO_RP2040
    fixed res;
    res.value = value-float2fix(other, FRAC_BITS);
    return res;
#else
    fixed res;
    res.value = value-int32_t(other * (1 <<FRAC_BITS));
    return res;
#endif
}

inline fixed fixed::operator*(const float &other) const
{
#ifdef PICO_RP2040
    fixed res;
    res.value = int32_t((int64_t(value)*int64_t(float2fix(other, FRAC_BITS))) >> FRAC_BITS);
    return res;
#else
    fixed res;
    res.value = int32_t((int64_t(value)*int64_t(int32_t(other * (1 <<FRAC_BITS)))) >> FRAC_BITS);
    return res;
#endif
}

inline fixed fixed::operator/(const float &other) const
{
#ifdef PICO_RP2040
    fixed res;
    res.value = int32_t((int64_t(value)<<FRAC_BITS)/int64_t(float2fix(other, FRAC_BITS)));
    return res;
#else
    fixed res;
    res.value = int32_t((int64_t(value)<<FRAC_BITS)/int64_t(int32_t(other * (1 <<FRAC_BITS))));
    return res;
#endif
}

inline fixed fixed::operator+(const int& other) const
{
    fixed res;
    res.value = value + (other << FRAC_BITS);
    return res;
}

inline fixed fixed::operator-(const int& other) const
{
    fixed res;
    res.value = value - (other << FRAC_BITS);
    return res;
}

inline fixed fixed::operator*(const int& other) const
{
    fixed res;
    res.value = value*other;
    return res;
}

inline fixed fixed::operator/(const int& other) const
{
    fixed res;
    res.value = value / other;
    return res;
}

inline fixed &fixed::operator+=(const fixed &other)
{
    value += other.value;
    return *this;
}

inline fixed &fixed::operator-=(const fixed &other)
{
    value -= other.value;
    return *this;
}

inline fixed &fixed::operator*=(const fixed &other)
{
    value = int32_t((int64_t(value)*int64_t(other.value)) >> FRAC_BITS);
    return *this;
}

inline fixed &fixed::operator/=(const fixed &other)
{
    value = int32_t((int64_t(value)<<FRAC_BITS)/int64_t(other.value));
    return *this;
}

inline fixed &fixed::operator+=(const float &other)
{
#ifdef PICO_RP2040
    value += float2fix(other, FRAC_BITS);
    return *this;
#else
    value += int32_t(other * (1 <<FRAC_BITS));
    return *this;
#endif
}

inline fixed &fixed::operator-=(const float &other)
{
#ifdef PICO_RP2040
    value -= float2fix(other, FRAC_BITS);
    return *this;
#else
    value -= int32_t(other * (1 <<FRAC_BITS));
    return *this;
#endif
}

inline fixed &fixed::operator*=(const float &other)
{
#ifdef PICO_RP2040
    value = int32_t((int64_t(value)*float2fix64(other, FRAC_BITS))>>FRAC_BITS);
    return *this;
#else
    value += int32_t(other * (1 <<FRAC_BITS));
    return *this;
#endif
}

inline fixed &fixed::operator/=(const float &other)
{
#ifdef PICO_RP2040
    value = int32_t((int64_t(value)<<FRAC_BITS)/float2fix64(other, FRAC_BITS));
    return *this;
#else
    value += int32_t(other * (1 <<FRAC_BITS));
    return *this;
#endif
    
    return *this;
}

inline fixed& fixed::operator+=(const int& other)
{
    value += (other << FRAC_BITS);
    return *this;
}

inline fixed& fixed::operator-=(const int& other)
{
    value -= (other << FRAC_BITS);
    return *this;
}

inline fixed& fixed::operator*=(const int& other)
{
    value *= other;
    return *this;
}

inline fixed& fixed::operator/=(const int& other)
{
    value /= other;
    return *this;
}

inline fixed &fixed::operator=(const fixed &other)
{
    value = other.value;
    return *this;
}

inline fixed &fixed::operator=(const float &other)
{
#ifdef PICO_RP2040
    value = float2fix(other, FRAC_BITS);
    return *this;
#else
    value = int32_t(other * (1 <<FRAC_BITS));
    return *this;
#endif
}

inline fixed &fixed::operator=(const int &other)
{
    value = other << FRAC_BITS;
    return *this;
}

inline bool fixed::operator> (const fixed &other) const
{
    return value > other.value;
}

inline bool fixed::operator> (const float &other) const
{
#ifdef PICO_RP2040
    return value > float2fix(other, FRAC_BITS);
#else
    return value > int32_t(other * (1 <<FRAC_BITS));
#endif
}

inline bool fixed::operator> (const int &other) const
{
    return value > (other<<FRAC_BITS);
}

inline bool fixed::operator<(const fixed &other) const
{
    return value < other.value;
}

inline bool fixed::operator<(const float &other) const
{
#ifdef PICO_RP2040
    return value < float2fix(other, FRAC_BITS);
#else
    return value < int32_t(other * (1 <<FRAC_BITS));
#endif
}

inline bool fixed::operator<(const int &other) const
{
    return value < (other<<FRAC_BITS);
}

inline bool fixed::operator==(const fixed &other) const
{
    return value == other.value;
}

inline bool fixed::operator==(const float &other) const
{
#ifdef PICO_RP2040
    return value == float2fix(other, FRAC_BITS);
#else
    return value == int32_t(other * (1 <<FRAC_BITS));
#endif
}

inline bool fixed::operator==(const int &other) const
{
    return value == (other<<FRAC_BITS);
}

inline bool fixed::operator>=(const fixed &other) const
{
    return value >= other.value;
}

inline bool fixed::operator>=(const float &other) const
{
#ifdef PICO_RP2040
    return value >= float2fix(other, FRAC_BITS);
#else
    return value >= int32_t(other * (1 <<FRAC_BITS));
#endif
}

inline bool fixed::operator>=(const int &other) const
{
    return value >= (other<<FRAC_BITS);
}

inline bool fixed::operator<=(const fixed &other) const
{
    return value <= other.value;
}

inline bool fixed::operator<=(const float &other) const
{
#ifdef PICO_RP2040
    return value <= float2fix(other, FRAC_BITS);
#else
    return value <= int32_t(other * (1 <<FRAC_BITS));
#endif
}

inline bool fixed::operator<=(const int &other) const
{
    return value <= (other<<FRAC_BITS);
}

inline fixed::operator float() const
{
#ifdef PICO_RP2040
    return fix2float(value, FRAC_BITS);
#else
    return float(value)/float(1<<FRAC_BITS);
#endif
}

inline fixed fixed::logn(const fixed &num)
{  
    int32_t shz = 17 - __builtin_clz(num.value);
    int32_t t0;
    if(shz >= 0){
        if (shz > 0 && (shz & (shz - 1)) != 0) {
            shz |= shz >> 1;
            shz |= shz >> 2;
            shz |= shz >> 4;
            shz |= shz >> 8;
            shz |= shz >> 16;
            shz++;
        }
        int16_t t = (num.value >> (shz + 6));
        t0 = -(int32_t(fixed::log_base_lookup[t]) << 2);
        int32_t interp = (shz >= 9)
            ? (num.value >> (shz - 9)) & 0x7FFF
            : (num.value << (9 - shz)) & 0x7FFF;
        int32_t delta = (-(fixed::log_base_lookup[t + 1] << 2)) - t0;
        t0 += (delta * interp) >> 15;
        t0 += (log_pow2_lookup[shz] << 4);
    }else{
        shz = -shz;
        if (shz > 0 && (shz & (shz - 1)) != 0) {
            shz |= shz >> 1;
            shz |= shz >> 2;
            shz |= shz >> 4;
            shz |= shz >> 8;
            shz |= shz >> 16;
            shz++;
            shz>>=1;
        }
        int16_t t = (num.value << shz) >> 6;
        t0 = -(int32_t(fixed::log_base_lookup[t]) << 2);
        int32_t interp = (num.value << (shz + 9)) & 0x7FFF;
        int32_t delta = (-(fixed::log_base_lookup[t + 1] << 2)) - t0;
        t0 += (delta * interp) >> 15;
        t0 -= (log_pow2_lookup[shz] << 4);
    }

    fixed res; 
    res.value = t0; 
    return res;
}

inline fixed fixed::logn_fast(const fixed &num)
{  
    int32_t shz = 17 - __builtin_clz(num.value);
    int32_t t0;
    if(shz >= 0){
        if (shz > 0 && (shz & (shz - 1)) != 0) {
            shz |= shz >> 1;
            shz |= shz >> 2;
            shz |= shz >> 4;
            shz |= shz >> 8;
            shz |= shz >> 16;
            shz++;
        }
        int16_t t = (num.value >> (shz + 6));
        t0 = -(int32_t(fixed::log_base_lookup[t]) << 2);
        t0 += (log_pow2_lookup[shz] << 4);
    }else{
        shz = -shz;
        if (shz > 0 && (shz & (shz - 1)) != 0) {
            shz |= shz >> 1;
            shz |= shz >> 2;
            shz |= shz >> 4;
            shz |= shz >> 8;
            shz |= shz >> 16;
            shz++;
            shz>>=1;
        }
        int16_t t = (num.value << shz) >> 6;
        t0 = -(int32_t(fixed::log_base_lookup[t]) << 2);
        t0 -= (log_pow2_lookup[shz] << 4);
    }

    fixed res; 
    res.value = t0; 
    return res;
}

inline fixed fixed::absf(const fixed &num)
{   
    fixed res; res.value = abs(num.value);
    return res;
}

inline fixed fixed::sign (const fixed& num)
{
    return num.value >= 0 ? 1.f : -1.f;
}

inline __attribute__((always_inline, hot)) fixed __not_in_flash_func(fixed::sqrt_acc)(const fixed & __restrict__ num)
{
    if(num.value <= 0) return 0;
    int32_t x0 = sqrt(num).value;
    int32_t div = int32_t((int64_t(num.value) << FRAC_BITS) / x0);
    x0  = (x0 + div + 1) >> 1;
    fixed result;
    result.value = x0;
    return result;
}
#ifdef SQRT_BIG_LUT
inline __attribute__((always_inline, hot)) fixed __not_in_flash_func(fixed::sqrt)(const fixed &num)
{
    if(num.value <= 0) return 0;

    int32_t shz = 17 - __builtin_clz(num.value);
    int32_t t0;
    if(shz > 0){ 
        shz += shz & 1;
        int16_t t = (num.value >> (shz + 5));
        t0 = fixed::sqrt_lookup[t];
        int16_t interp = (shz >= 10)
            ? (num.value >> (shz - 10)) & 0x7FFF
            : (num.value << (10 - shz)) & 0x7FFF;
        int16_t delta = fixed::sqrt_lookup[t + 1] - t0;
        t0 += (delta * interp) >> 15;
        t0 <<= ((shz >> 1) - 1);
    }else{
        shz = (-shz) & ~1;
        int16_t t = (num.value << shz) >> 5;
        t0 = fixed::sqrt_lookup[t];
        int16_t interp = (num.value << (shz + 10)) & 0x7FFF;
        int16_t delta = fixed::sqrt_lookup[t + 1] - t0;
        t0 += (delta * interp) >> 15;
        t0 >>= ((shz >> 1) + 1);
    }

    fixed res; 
    res.value = t0; 
    return res;
}
#else
inline __attribute__((always_inline, hot)) fixed __not_in_flash_func(fixed::sqrt)(const fixed & __restrict__ num)
{
    if(num.value <= 0) return 0;

    int32_t shz = 17 - __builtin_clz(num.value);
    int32_t t0;
    if(shz > 0){ 
        shz += shz & 1;
        int16_t t = (num.value >> (shz + 7));
        t0 = fixed::sqrt_lookup[t];
        int16_t interp = (shz >= 8)
            ? (num.value >> (shz - 8)) & 0x7FFF
            : (num.value << (8 - shz)) & 0x7FFF;
        int16_t delta = fixed::sqrt_lookup[t + 1] - t0;
        t0 += (delta * interp) >> 15;
        t0 <<= ((shz >> 1) - 1);
    }else{
        shz = (-shz) & ~1;
        int16_t t = (num.value << shz) >> 7;
        t0 = fixed::sqrt_lookup[t];
        int16_t interp = (num.value << (shz + 8)) & 0x7FFF;
        int16_t delta = fixed::sqrt_lookup[t + 1] - t0;
        t0 += (delta * interp) >> 15;
        t0 >>= ((shz >> 1) + 1);
    }

    fixed res; 
    res.value = t0; 
    return res;
}

inline __attribute__((always_inline, hot)) fixed __not_in_flash_func(fixed::sqrt_fast)(const fixed & __restrict__ num)
{
    if(num.value <= 0) return 0;

    int32_t shz = 17 - __builtin_clz(num.value);
    int32_t t0;
    if(shz > 0){ 
        shz += shz & 1;
        int16_t t = (num.value >> (shz + 7));
        t0 = fixed::sqrt_lookup[t];
        t0 <<= ((shz >> 1) - 1);
    }else{
        shz = (-shz) & ~1;
        int16_t t = (num.value << shz) >> 7;
        t0 = fixed::sqrt_lookup[t];
        t0 >>= ((shz >> 1) + 1);
    }

    fixed res; 
    res.value = t0; 
    return res;
}
#endif
const fixed fixed::PI = 3.14159265359f;
const fixed fixed::HALF_PI = 3.14159265359f/2.f;
const fixed fixed::TWO_PI = 3.14159265359f*2.f;

inline fixed fixed::sin(const fixed &num)
{
    return cos(num-HALF_PI);
}

inline fixed fixed::sin_fast(const fixed &num)
{
    return cos_fast(num-HALF_PI);
}

inline fixed fixed::cos(const fixed &num)
{
    int32_t clamped = num.value % TWO_PI.value;
    if(clamped < 0) clamped += TWO_PI.value;

    int32_t quadrant = ((clamped << 13) / (HALF_PI.value >> 2))>>15;
    int32_t angle_in_q1 = 0;

    switch(quadrant) {
        case 0: angle_in_q1 = clamped; break;
        case 1: angle_in_q1 = PI.value - clamped; break;
        case 2: angle_in_q1 = clamped - PI.value; break;
        case 3: angle_in_q1 = TWO_PI.value - clamped; break;
    }

    int32_t index = angle_in_q1>>6;
    int32_t t0 = sin_cos_lookup[index];
    int32_t t1 = sin_cos_lookup[index+1];
    t0 += ((t1-t0)*((angle_in_q1<<9)&0x7FFF)) >> 15;
    fixed result;
    if((quadrant == 1 || quadrant == 2)) result.value = -t0;
    else result.value = t0;

    return result;
}

inline fixed fixed::cos_fast(const fixed &num)
{
    int32_t clamped = num.value % TWO_PI.value;
    if(clamped < 0) clamped += TWO_PI.value;

    int32_t quadrant = ((clamped << 13) / (HALF_PI.value >> 2))>>15;
    int32_t angle_in_q1 = 0;

    switch(quadrant) {
        case 0: angle_in_q1 = clamped; break;
        case 1: angle_in_q1 = PI.value - clamped; break;
        case 2: angle_in_q1 = clamped - PI.value; break;
        case 3: angle_in_q1 = TWO_PI.value - clamped; break;
    }

    int32_t index = angle_in_q1>>6;
    int32_t t0 = sin_cos_lookup[index];
    fixed result;
    if((quadrant == 1 || quadrant == 2)) result.value = -t0;
    else result.value = t0;

    return result;
}

#ifdef SQRT_BIG_LUT
const uint16_t __not_in_flash("sqrt_lookup") fixed::sqrt_lookup[1025] = {
    0,
    2048,
    2896,
    3547,
    4096,
    4579,
    5016,
    5418,
    5792,
    6144,
    6476,
    6792,
    7094,
    7384,
    7662,
    7931,
    8192,
    8444,
    8688,
    8927,
    9158,
    9385,
    9605,
    9821,
    10033,
    10240,
    10442,
    10641,
    10836,
    11028,
    11217,
    11402,
    11585,
    11764,
    11941,
    12116,
    12288,
    12457,
    12624,
    12789,
    12952,
    13113,
    13272,
    13429,
    13584,
    13738,
    13890,
    14040,
    14188,
    14336,
    14481,
    14625,
    14768,
    14909,
    15049,
    15188,
    15325,
    15462,
    15597,
    15730,
    15863,
    15995,
    16125,
    16255,
    16384,
    16511,
    16638,
    16763,
    16888,
    17011,
    17134,
    17256,
    17377,
    17498,
    17617,
    17736,
    17854,
    17971,
    18087,
    18203,
    18317,
    18432,
    18545,
    18658,
    18770,
    18881,
    18992,
    19102,
    19211,
    19320,
    19429,
    19536,
    19643,
    19750,
    19856,
    19961,
    20066,
    20170,
    20274,
    20377,
    20480,
    20582,
    20683,
    20784,
    20885,
    20985,
    21085,
    21184,
    21283,
    21381,
    21479,
    21577,
    21673,
    21770,
    21866,
    21962,
    22057,
    22152,
    22246,
    22341,
    22434,
    22528,
    22620,
    22713,
    22805,
    22897,
    22988,
    23079,
    23170,
    23260,
    23350,
    23440,
    23529,
    23618,
    23707,
    23795,
    23883,
    23971,
    24058,
    24145,
    24232,
    24318,
    24404,
    24490,
    24576,
    24661,
    24746,
    24830,
    24914,
    24999,
    25082,
    25166,
    25249,
    25332,
    25415,
    25497,
    25579,
    25661,
    25742,
    25824,
    25905,
    25986,
    26066,
    26147,
    26227,
    26307,
    26386,
    26465,
    26545,
    26624,
    26702,
    26781,
    26859,
    26937,
    27014,
    27092,
    27169,
    27246,
    27323,
    27400,
    27476,
    27553,
    27629,
    27704,
    27780,
    27855,
    27930,
    28005,
    28080,
    28155,
    28229,
    28303,
    28377,
    28451,
    28525,
    28598,
    28672,
    28745,
    28817,
    28890,
    28963,
    29035,
    29107,
    29179,
    29251,
    29322,
    29394,
    29465,
    29536,
    29607,
    29678,
    29748,
    29819,
    29889,
    29959,
    30029,
    30099,
    30168,
    30238,
    30307,
    30376,
    30445,
    30514,
    30583,
    30651,
    30720,
    30788,
    30856,
    30924,
    30991,
    31059,
    31126,
    31194,
    31261,
    31328,
    31395,
    31461,
    31528,
    31595,
    31661,
    31727,
    31793,
    31859,
    31925,
    31990,
    32056,
    32121,
    32186,
    32251,
    32316,
    32381,
    32446,
    32510,
    32575,
    32639,
    32703,
    32768,
    32831,
    32895,
    32959,
    33023,
    33086,
    33149,
    33212,
    33276,
    33339,
    33401,
    33464,
    33527,
    33589,
    33652,
    33714,
    33776,
    33838,
    33900,
    33962,
    34023,
    34085,
    34146,
    34208,
    34269,
    34330,
    34391,
    34452,
    34513,
    34574,
    34634,
    34695,
    34755,
    34816,
    34876,
    34936,
    34996,
    35056,
    35115,
    35175,
    35235,
    35294,
    35353,
    35413,
    35472,
    35531,
    35590,
    35649,
    35708,
    35766,
    35825,
    35883,
    35942,
    36000,
    36058,
    36116,
    36174,
    36232,
    36290,
    36348,
    36406,
    36463,
    36521,
    36578,
    36635,
    36692,
    36750,
    36807,
    36864,
    36920,
    36977,
    37034,
    37090,
    37147,
    37203,
    37260,
    37316,
    37372,
    37428,
    37484,
    37540,
    37596,
    37652,
    37707,
    37763,
    37818,
    37874,
    37929,
    37984,
    38039,
    38095,
    38150,
    38204,
    38259,
    38314,
    38369,
    38423,
    38478,
    38532,
    38587,
    38641,
    38695,
    38749,
    38804,
    38858,
    38912,
    38965,
    39019,
    39073,
    39126,
    39180,
    39234,
    39287,
    39340,
    39394,
    39447,
    39500,
    39553,
    39606,
    39659,
    39712,
    39764,
    39817,
    39870,
    39922,
    39975,
    40027,
    40080,
    40132,
    40184,
    40236,
    40288,
    40340,
    40392,
    40444,
    40496,
    40548,
    40600,
    40651,
    40703,
    40754,
    40806,
    40857,
    40908,
    40960,
    41011,
    41062,
    41113,
    41164,
    41215,
    41266,
    41316,
    41367,
    41418,
    41468,
    41519,
    41569,
    41620,
    41670,
    41720,
    41771,
    41821,
    41871,
    41921,
    41971,
    42021,
    42071,
    42121,
    42170,
    42220,
    42270,
    42319,
    42369,
    42418,
    42468,
    42517,
    42566,
    42616,
    42665,
    42714,
    42763,
    42812,
    42861,
    42910,
    42959,
    43008,
    43056,
    43105,
    43154,
    43202,
    43251,
    43299,
    43347,
    43396,
    43444,
    43492,
    43541,
    43589,
    43637,
    43685,
    43733,
    43781,
    43829,
    43876,
    43924,
    43972,
    44020,
    44067,
    44115,
    44162,
    44210,
    44257,
    44305,
    44352,
    44399,
    44446,
    44493,
    44541,
    44588,
    44635,
    44682,
    44728,
    44775,
    44822,
    44869,
    44916,
    44962,
    45009,
    45056,
    45102,
    45148,
    45195,
    45241,
    45288,
    45334,
    45380,
    45426,
    45472,
    45519,
    45565,
    45611,
    45657,
    45702,
    45748,
    45794,
    45840,
    45886,
    45931,
    45977,
    46023,
    46068,
    46114,
    46159,
    46204,
    46250,
    46295,
    46340,
    46386,
    46431,
    46476,
    46521,
    46566,
    46611,
    46656,
    46701,
    46746,
    46791,
    46836,
    46880,
    46925,
    46970,
    47014,
    47059,
    47104,
    47148,
    47192,
    47237,
    47281,
    47326,
    47370,
    47414,
    47458,
    47503,
    47547,
    47591,
    47635,
    47679,
    47723,
    47767,
    47811,
    47854,
    47898,
    47942,
    47986,
    48029,
    48073,
    48117,
    48160,
    48204,
    48247,
    48291,
    48334,
    48377,
    48421,
    48464,
    48507,
    48550,
    48594,
    48637,
    48680,
    48723,
    48766,
    48809,
    48852,
    48895,
    48938,
    48981,
    49023,
    49066,
    49109,
    49152,
    49194,
    49237,
    49279,
    49322,
    49364,
    49407,
    49449,
    49492,
    49534,
    49576,
    49619,
    49661,
    49703,
    49745,
    49787,
    49829,
    49872,
    49914,
    49956,
    49998,
    50039,
    50081,
    50123,
    50165,
    50207,
    50249,
    50290,
    50332,
    50374,
    50415,
    50457,
    50498,
    50540,
    50581,
    50623,
    50664,
    50706,
    50747,
    50788,
    50830,
    50871,
    50912,
    50953,
    50994,
    51035,
    51076,
    51118,
    51159,
    51200,
    51240,
    51281,
    51322,
    51363,
    51404,
    51445,
    51485,
    51526,
    51567,
    51607,
    51648,
    51689,
    51729,
    51770,
    51810,
    51851,
    51891,
    51932,
    51972,
    52012,
    52053,
    52093,
    52133,
    52173,
    52213,
    52254,
    52294,
    52334,
    52374,
    52414,
    52454,
    52494,
    52534,
    52574,
    52614,
    52653,
    52693,
    52733,
    52773,
    52812,
    52852,
    52892,
    52931,
    52971,
    53011,
    53050,
    53090,
    53129,
    53169,
    53208,
    53248,
    53287,
    53326,
    53366,
    53405,
    53444,
    53483,
    53522,
    53562,
    53601,
    53640,
    53679,
    53718,
    53757,
    53796,
    53835,
    53874,
    53913,
    53952,
    53991,
    54029,
    54068,
    54107,
    54146,
    54184,
    54223,
    54262,
    54300,
    54339,
    54378,
    54416,
    54455,
    54493,
    54532,
    54570,
    54609,
    54647,
    54685,
    54724,
    54762,
    54800,
    54839,
    54877,
    54915,
    54953,
    54991,
    55029,
    55067,
    55106,
    55144,
    55182,
    55220,
    55258,
    55296,
    55333,
    55371,
    55409,
    55447,
    55485,
    55523,
    55560,
    55598,
    55636,
    55673,
    55711,
    55749,
    55786,
    55824,
    55861,
    55899,
    55937,
    55974,
    56011,
    56049,
    56086,
    56124,
    56161,
    56198,
    56236,
    56273,
    56310,
    56347,
    56385,
    56422,
    56459,
    56496,
    56533,
    56570,
    56607,
    56644,
    56681,
    56718,
    56755,
    56792,
    56829,
    56866,
    56903,
    56940,
    56977,
    57013,
    57050,
    57087,
    57124,
    57160,
    57197,
    57234,
    57270,
    57307,
    57344,
    57380,
    57417,
    57453,
    57490,
    57526,
    57563,
    57599,
    57635,
    57672,
    57708,
    57744,
    57781,
    57817,
    57853,
    57889,
    57926,
    57962,
    57998,
    58034,
    58070,
    58106,
    58143,
    58179,
    58215,
    58251,
    58287,
    58323,
    58359,
    58394,
    58430,
    58466,
    58502,
    58538,
    58574,
    58610,
    58645,
    58681,
    58717,
    58752,
    58788,
    58824,
    58859,
    58895,
    58931,
    58966,
    59002,
    59037,
    59073,
    59108,
    59144,
    59179,
    59215,
    59250,
    59285,
    59321,
    59356,
    59392,
    59427,
    59462,
    59497,
    59533,
    59568,
    59603,
    59638,
    59673,
    59708,
    59744,
    59779,
    59814,
    59849,
    59884,
    59919,
    59954,
    59989,
    60024,
    60059,
    60094,
    60128,
    60163,
    60198,
    60233,
    60268,
    60303,
    60337,
    60372,
    60407,
    60442,
    60476,
    60511,
    60546,
    60580,
    60615,
    60649,
    60684,
    60718,
    60753,
    60788,
    60822,
    60856,
    60891,
    60925,
    60960,
    60994,
    61029,
    61063,
    61097,
    61132,
    61166,
    61200,
    61234,
    61269,
    61303,
    61337,
    61371,
    61405,
    61440,
    61474,
    61508,
    61542,
    61576,
    61610,
    61644,
    61678,
    61712,
    61746,
    61780,
    61814,
    61848,
    61882,
    61916,
    61949,
    61983,
    62017,
    62051,
    62085,
    62118,
    62152,
    62186,
    62220,
    62253,
    62287,
    62321,
    62354,
    62388,
    62422,
    62455,
    62489,
    62522,
    62556,
    62589,
    62623,
    62656,
    62690,
    62723,
    62757,
    62790,
    62823,
    62857,
    62890,
    62923,
    62957,
    62990,
    63023,
    63057,
    63090,
    63123,
    63156,
    63190,
    63223,
    63256,
    63289,
    63322,
    63355,
    63388,
    63421,
    63454,
    63488,
    63521,
    63554,
    63587,
    63619,
    63652,
    63685,
    63718,
    63751,
    63784,
    63817,
    63850,
    63883,
    63915,
    63948,
    63981,
    64014,
    64047,
    64079,
    64112,
    64145,
    64177,
    64210,
    64243,
    64275,
    64308,
    64341,
    64373,
    64406,
    64438,
    64471,
    64503,
    64536,
    64568,
    64601,
    64633,
    64666,
    64698,
    64731,
    64763,
    64795,
    64828,
    64860,
    64892,
    64925,
    64957,
    64989,
    65021,
    65054,
    65086,
    65118,
    65150,
    65183,
    65215,
    65247,
    65279,
    65311,
    65343,
    65375,
    65407,
    65439,
    65471,
    65503,
    65535
};
#else
alignas(32) const uint16_t __not_in_flash("sqrt_lookup") fixed::sqrt_lookup[257] = {
    0,
    4096,
    5792,
    7094,
    8192,
    9158,
    10033,
    10836,
    11585,
    12288,
    12952,
    13584,
    14188,
    14768,
    15325,
    15863,
    16384,
    16888,
    17377,
    17854,
    18317,
    18770,
    19211,
    19643,
    20066,
    20480,
    20885,
    21283,
    21673,
    22057,
    22434,
    22805,
    23170,
    23529,
    23883,
    24232,
    24576,
    24914,
    25249,
    25579,
    25905,
    26227,
    26545,
    26859,
    27169,
    27476,
    27780,
    28080,
    28377,
    28672,
    28963,
    29251,
    29536,
    29819,
    30099,
    30376,
    30651,
    30924,
    31194,
    31461,
    31727,
    31990,
    32251,
    32510,
    32768,
    33023,
    33276,
    33527,
    33776,
    34023,
    34269,
    34513,
    34755,
    34996,
    35235,
    35472,
    35708,
    35942,
    36174,
    36406,
    36635,
    36864,
    37090,
    37316,
    37540,
    37763,
    37984,
    38204,
    38423,
    38641,
    38858,
    39073,
    39287,
    39500,
    39712,
    39922,
    40132,
    40340,
    40548,
    40754,
    40960,
    41164,
    41367,
    41569,
    41771,
    41971,
    42170,
    42369,
    42566,
    42763,
    42959,
    43154,
    43347,
    43541,
    43733,
    43924,
    44115,
    44305,
    44493,
    44682,
    44869,
    45056,
    45241,
    45426,
    45611,
    45794,
    45977,
    46159,
    46340,
    46521,
    46701,
    46880,
    47059,
    47237,
    47414,
    47591,
    47767,
    47942,
    48117,
    48291,
    48464,
    48637,
    48809,
    48981,
    49152,
    49322,
    49492,
    49661,
    49829,
    49998,
    50165,
    50332,
    50498,
    50664,
    50830,
    50994,
    51159,
    51322,
    51485,
    51648,
    51810,
    51972,
    52133,
    52294,
    52454,
    52614,
    52773,
    52931,
    53090,
    53248,
    53405,
    53562,
    53718,
    53874,
    54029,
    54184,
    54339,
    54493,
    54647,
    54800,
    54953,
    55106,
    55258,
    55409,
    55560,
    55711,
    55861,
    56011,
    56161,
    56310,
    56459,
    56607,
    56755,
    56903,
    57050,
    57197,
    57344,
    57490,
    57635,
    57781,
    57926,
    58070,
    58215,
    58359,
    58502,
    58645,
    58788,
    58931,
    59073,
    59215,
    59356,
    59497,
    59638,
    59779,
    59919,
    60059,
    60198,
    60337,
    60476,
    60615,
    60753,
    60891,
    61029,
    61166,
    61303,
    61440,
    61576,
    61712,
    61848,
    61983,
    62118,
    62253,
    62388,
    62522,
    62656,
    62790,
    62923,
    63057,
    63190,
    63322,
    63454,
    63587,
    63718,
    63850,
    63981,
    64112,
    64243,
    64373,
    64503,
    64633,
    64763,
    64892,
    65021,
    65150,
    65279,
    65407,
    65535
};
#endif
const uint16_t __not_in_flash("sin_cos_lookup") fixed::sin_cos_lookup[805] = {
    32768,
    32767,
    32767,
    32767,
    32766,
    32766,
    32765,
    32764,
    32763,
    32762,
    32761,
    32760,
    32758,
    32757,
    32755,
    32753,
    32751,
    32749,
    32747,
    32745,
    32742,
    32740,
    32737,
    32734,
    32731,
    32728,
    32725,
    32722,
    32718,
    32715,
    32711,
    32707,
    32703,
    32699,
    32695,
    32691,
    32686,
    32682,
    32677,
    32672,
    32667,
    32662,
    32657,
    32652,
    32646,
    32641,
    32635,
    32629,
    32624,
    32617,
    32611,
    32605,
    32599,
    32592,
    32585,
    32579,
    32572,
    32565,
    32557,
    32550,
    32543,
    32535,
    32527,
    32520,
    32512,
    32504,
    32495,
    32487,
    32479,
    32470,
    32462,
    32453,
    32444,
    32435,
    32426,
    32416,
    32407,
    32397,
    32388,
    32378,
    32368,
    32358,
    32348,
    32338,
    32327,
    32317,
    32306,
    32295,
    32284,
    32273,
    32262,
    32251,
    32240,
    32228,
    32216,
    32205,
    32193,
    32181,
    32169,
    32156,
    32144,
    32132,
    32119,
    32106,
    32093,
    32080,
    32067,
    32054,
    32041,
    32027,
    32014,
    32000,
    31986,
    31972,
    31958,
    31944,
    31930,
    31915,
    31901,
    31886,
    31871,
    31856,
    31841,
    31826,
    31811,
    31795,
    31780,
    31764,
    31748,
    31732,
    31716,
    31700,
    31684,
    31667,
    31651,
    31634,
    31618,
    31601,
    31584,
    31567,
    31549,
    31532,
    31515,
    31497,
    31479,
    31461,
    31443,
    31425,
    31407,
    31389,
    31370,
    31352,
    31333,
    31314,
    31295,
    31276,
    31257,
    31238,
    31219,
    31199,
    31180,
    31160,
    31140,
    31120,
    31100,
    31080,
    31059,
    31039,
    31018,
    30998,
    30977,
    30956,
    30935,
    30914,
    30892,
    30871,
    30849,
    30828,
    30806,
    30784,
    30762,
    30740,
    30718,
    30695,
    30673,
    30650,
    30628,
    30605,
    30582,
    30559,
    30536,
    30512,
    30489,
    30465,
    30442,
    30418,
    30394,
    30370,
    30346,
    30322,
    30298,
    30273,
    30249,
    30224,
    30199,
    30174,
    30149,
    30124,
    30099,
    30074,
    30048,
    30022,
    29997,
    29971,
    29945,
    29919,
    29893,
    29866,
    29840,
    29814,
    29787,
    29760,
    29733,
    29706,
    29679,
    29652,
    29625,
    29597,
    29570,
    29542,
    29515,
    29487,
    29459,
    29431,
    29402,
    29374,
    29346,
    29317,
    29288,
    29260,
    29231,
    29202,
    29173,
    29144,
    29114,
    29085,
    29055,
    29026,
    28996,
    28966,
    28936,
    28906,
    28876,
    28845,
    28815,
    28784,
    28754,
    28723,
    28692,
    28661,
    28630,
    28599,
    28568,
    28536,
    28505,
    28473,
    28441,
    28409,
    28377,
    28345,
    28313,
    28281,
    28249,
    28216,
    28183,
    28151,
    28118,
    28085,
    28052,
    28019,
    27986,
    27952,
    27919,
    27885,
    27851,
    27818,
    27784,
    27750,
    27716,
    27682,
    27647,
    27613,
    27578,
    27544,
    27509,
    27474,
    27439,
    27404,
    27369,
    27334,
    27298,
    27263,
    27227,
    27192,
    27156,
    27120,
    27084,
    27048,
    27012,
    26975,
    26939,
    26903,
    26866,
    26829,
    26792,
    26756,
    26719,
    26681,
    26644,
    26607,
    26569,
    26532,
    26494,
    26457,
    26419,
    26381,
    26343,
    26305,
    26266,
    26228,
    26190,
    26151,
    26113,
    26074,
    26035,
    25996,
    25957,
    25918,
    25879,
    25839,
    25800,
    25760,
    25721,
    25681,
    25641,
    25601,
    25561,
    25521,
    25481,
    25441,
    25400,
    25360,
    25319,
    25279,
    25238,
    25197,
    25156,
    25115,
    25074,
    25033,
    24991,
    24950,
    24908,
    24867,
    24825,
    24783,
    24741,
    24699,
    24657,
    24615,
    24572,
    24530,
    24487,
    24445,
    24402,
    24359,
    24317,
    24274,
    24231,
    24187,
    24144,
    24101,
    24057,
    24014,
    23970,
    23927,
    23883,
    23839,
    23795,
    23751,
    23707,
    23663,
    23618,
    23574,
    23529,
    23485,
    23440,
    23395,
    23350,
    23305,
    23260,
    23215,
    23170,
    23125,
    23079,
    23034,
    22988,
    22943,
    22897,
    22851,
    22805,
    22759,
    22713,
    22667,
    22620,
    22574,
    22528,
    22481,
    22434,
    22388,
    22341,
    22294,
    22247,
    22200,
    22153,
    22106,
    22058,
    22011,
    21964,
    21916,
    21868,
    21821,
    21773,
    21725,
    21677,
    21629,
    21581,
    21533,
    21484,
    21436,
    21388,
    21339,
    21290,
    21242,
    21193,
    21144,
    21095,
    21046,
    20997,
    20948,
    20898,
    20849,
    20800,
    20750,
    20701,
    20651,
    20601,
    20551,
    20501,
    20451,
    20401,
    20351,
    20301,
    20251,
    20200,
    20150,
    20099,
    20049,
    19998,
    19947,
    19897,
    19846,
    19795,
    19744,
    19692,
    19641,
    19590,
    19539,
    19487,
    19436,
    19384,
    19332,
    19281,
    19229,
    19177,
    19125,
    19073,
    19021,
    18969,
    18917,
    18864,
    18812,
    18759,
    18707,
    18654,
    18602,
    18549,
    18496,
    18443,
    18390,
    18337,
    18284,
    18231,
    18178,
    18125,
    18071,
    18018,
    17964,
    17911,
    17857,
    17803,
    17749,
    17696,
    17642,
    17588,
    17534,
    17480,
    17425,
    17371,
    17317,
    17262,
    17208,
    17153,
    17099,
    17044,
    16990,
    16935,
    16880,
    16825,
    16770,
    16715,
    16660,
    16605,
    16550,
    16494,
    16439,
    16383,
    16328,
    16272,
    16217,
    16161,
    16106,
    16050,
    15994,
    15938,
    15882,
    15826,
    15770,
    15714,
    15658,
    15601,
    15545,
    15489,
    15432,
    15376,
    15319,
    15262,
    15206,
    15149,
    15092,
    15035,
    14978,
    14921,
    14864,
    14807,
    14750,
    14693,
    14636,
    14578,
    14521,
    14464,
    14406,
    14349,
    14291,
    14233,
    14176,
    14118,
    14060,
    14002,
    13944,
    13887,
    13829,
    13770,
    13712,
    13654,
    13596,
    13538,
    13479,
    13421,
    13363,
    13304,
    13246,
    13187,
    13128,
    13070,
    13011,
    12952,
    12893,
    12834,
    12775,
    12716,
    12657,
    12598,
    12539,
    12480,
    12421,
    12362,
    12302,
    12243,
    12184,
    12124,
    12065,
    12005,
    11945,
    11886,
    11826,
    11766,
    11707,
    11647,
    11587,
    11527,
    11467,
    11407,
    11347,
    11287,
    11227,
    11167,
    11106,
    11046,
    10986,
    10926,
    10865,
    10805,
    10744,
    10684,
    10623,
    10563,
    10502,
    10441,
    10381,
    10320,
    10259,
    10198,
    10138,
    10077,
    10016,
    9955,
    9894,
    9833,
    9772,
    9710,
    9649,
    9588,
    9527,
    9466,
    9404,
    9343,
    9282,
    9220,
    9159,
    9097,
    9036,
    8974,
    8913,
    8851,
    8789,
    8728,
    8666,
    8604,
    8542,
    8480,
    8419,
    8357,
    8295,
    8233,
    8171,
    8109,
    8047,
    7985,
    7923,
    7861,
    7798,
    7736,
    7674,
    7612,
    7549,
    7487,
    7425,
    7362,
    7300,
    7238,
    7175,
    7113,
    7050,
    6988,
    6925,
    6862,
    6800,
    6737,
    6675,
    6612,
    6549,
    6486,
    6424,
    6361,
    6298,
    6235,
    6172,
    6109,
    6047,
    5984,
    5921,
    5858,
    5795,
    5732,
    5669,
    5606,
    5542,
    5479,
    5416,
    5353,
    5290,
    5227,
    5163,
    5100,
    5037,
    4974,
    4910,
    4847,
    4784,
    4720,
    4657,
    4594,
    4530,
    4467,
    4403,
    4340,
    4277,
    4213,
    4150,
    4086,
    4023,
    3959,
    3895,
    3832,
    3768,
    3705,
    3641,
    3577,
    3514,
    3450,
    3386,
    3323,
    3259,
    3195,
    3132,
    3068,
    3004,
    2940,
    2877,
    2813,
    2749,
    2685,
    2622,
    2558,
    2494,
    2430,
    2366,
    2302,
    2238,
    2175,
    2111,
    2047,
    1983,
    1919,
    1855,
    1791,
    1727,
    1663,
    1599,
    1535,
    1471,
    1408,
    1344,
    1280,
    1216,
    1152,
    1088,
    1024,
    960,
    896,
    832,
    768,
    704,
    640,
    576,
    512,
    448,
    384,
    320,
    256,
    192,
    128,
    64,
    0
};

const uint16_t __not_in_flash("log_base_lookup") fixed::log_base_lookup[513] = {
    56782,
    51104,
    45426,
    42104,
    39747,
    37919,
    36426,
    35163,
    34069,
    33104,
    32241,
    31460,
    30748,
    30092,
    29485,
    28920,
    28391,
    27894,
    27426,
    26983,
    26563,
    26163,
    25782,
    25418,
    25069,
    24735,
    24414,
    24104,
    23806,
    23519,
    23241,
    22973,
    22713,
    22460,
    22216,
    21978,
    21748,
    21523,
    21305,
    21092,
    20885,
    20682,
    20485,
    20292,
    20104,
    19920,
    19740,
    19563,
    19391,
    19222,
    19057,
    18894,
    18735,
    18579,
    18426,
    18276,
    18128,
    17983,
    17841,
    17701,
    17563,
    17428,
    17294,
    17163,
    17034,
    16907,
    16782,
    16659,
    16538,
    16418,
    16300,
    16184,
    16069,
    15956,
    15845,
    15735,
    15626,
    15519,
    15414,
    15309,
    15206,
    15105,
    15004,
    14905,
    14807,
    14710,
    14614,
    14519,
    14426,
    14333,
    14241,
    14151,
    14061,
    13973,
    13885,
    13798,
    13713,
    13628,
    13544,
    13461,
    13378,
    13297,
    13216,
    13136,
    13057,
    12979,
    12901,
    12824,
    12748,
    12672,
    12598,
    12523,
    12450,
    12377,
    12305,
    12233,
    12162,
    12092,
    12022,
    11953,
    11885,
    11817,
    11749,
    11682,
    11616,
    11550,
    11485,
    11420,
    11356,
    11292,
    11229,
    11166,
    11104,
    11042,
    10981,
    10920,
    10859,
    10799,
    10740,
    10681,
    10622,
    10564,
    10506,
    10448,
    10391,
    10334,
    10278,
    10222,
    10167,
    10112,
    10057,
    10002,
    9948,
    9895,
    9841,
    9788,
    9735,
    9683,
    9631,
    9579,
    9528,
    9477,
    9426,
    9376,
    9326,
    9276,
    9226,
    9177,
    9128,
    9080,
    9031,
    8983,
    8936,
    8888,
    8841,
    8794,
    8747,
    8701,
    8655,
    8609,
    8563,
    8518,
    8473,
    8428,
    8383,
    8339,
    8295,
    8251,
    8207,
    8163,
    8120,
    8077,
    8034,
    7992,
    7950,
    7907,
    7866,
    7824,
    7782,
    7741,
    7700,
    7659,
    7619,
    7578,
    7538,
    7498,
    7458,
    7418,
    7379,
    7339,
    7300,
    7261,
    7223,
    7184,
    7146,
    7108,
    7070,
    7032,
    6994,
    6957,
    6919,
    6882,
    6845,
    6808,
    6772,
    6735,
    6699,
    6663,
    6627,
    6591,
    6555,
    6520,
    6484,
    6449,
    6414,
    6379,
    6344,
    6310,
    6275,
    6241,
    6206,
    6172,
    6138,
    6105,
    6071,
    6038,
    6004,
    5971,
    5938,
    5905,
    5872,
    5839,
    5807,
    5774,
    5742,
    5710,
    5678,
    5646,
    5614,
    5582,
    5551,
    5519,
    5488,
    5457,
    5426,
    5395,
    5364,
    5333,
    5302,
    5272,
    5242,
    5211,
    5181,
    5151,
    5121,
    5091,
    5062,
    5032,
    5002,
    4973,
    4944,
    4914,
    4885,
    4856,
    4827,
    4799,
    4770,
    4741,
    4713,
    4684,
    4656,
    4628,
    4600,
    4572,
    4544,
    4516,
    4488,
    4461,
    4433,
    4406,
    4378,
    4351,
    4324,
    4297,
    4270,
    4243,
    4216,
    4190,
    4163,
    4136,
    4110,
    4083,
    4057,
    4031,
    4005,
    3979,
    3953,
    3927,
    3901,
    3875,
    3850,
    3824,
    3799,
    3773,
    3748,
    3723,
    3698,
    3673,
    3647,
    3623,
    3598,
    3573,
    3548,
    3524,
    3499,
    3474,
    3450,
    3426,
    3401,
    3377,
    3353,
    3329,
    3305,
    3281,
    3257,
    3234,
    3210,
    3186,
    3163,
    3139,
    3116,
    3092,
    3069,
    3046,
    3023,
    2999,
    2976,
    2953,
    2931,
    2908,
    2885,
    2862,
    2840,
    2817,
    2794,
    2772,
    2749,
    2727,
    2705,
    2683,
    2660,
    2638,
    2616,
    2594,
    2572,
    2550,
    2529,
    2507,
    2485,
    2464,
    2442,
    2420,
    2399,
    2378,
    2356,
    2335,
    2314,
    2292,
    2271,
    2250,
    2229,
    2208,
    2187,
    2166,
    2146,
    2125,
    2104,
    2083,
    2063,
    2042,
    2022,
    2001,
    1981,
    1961,
    1940,
    1920,
    1900,
    1880,
    1860,
    1840,
    1819,
    1800,
    1780,
    1760,
    1740,
    1720,
    1700,
    1681,
    1661,
    1642,
    1622,
    1603,
    1583,
    1564,
    1544,
    1525,
    1506,
    1487,
    1468,
    1448,
    1429,
    1410,
    1391,
    1372,
    1353,
    1335,
    1316,
    1297,
    1278,
    1260,
    1241,
    1222,
    1204,
    1185,
    1167,
    1148,
    1130,
    1112,
    1093,
    1075,
    1057,
    1039,
    1021,
    1002,
    984,
    966,
    948,
    930,
    913,
    895,
    877,
    859,
    841,
    824,
    806,
    788,
    771,
    753,
    736,
    718,
    701,
    683,
    666,
    649,
    631,
    614,
    597,
    580,
    562,
    545,
    528,
    511,
    494,
    477,
    460,
    443,
    426,
    410,
    393,
    376,
    359,
    343,
    326,
    309,
    293,
    276,
    260,
    243,
    227,
    210,
    194,
    177,
    161,
    145,
    129,
    112,
    96,
    80,
    64,
    48,
    32,
    16,
    0
};

const uint16_t __not_in_flash("log_pow2_lookup") fixed::log_pow2_lookup[18] = {
    0,
    1419,
    2839,
    4258,
    5678,
    7097,
    8517,
    9936,
    11356,
    12776,
    14195,
    15615,
    17034,
    18454,
    19873,
    21293,
    22713
};

#endif // MY_FIXED_POINT_IMPL_H
